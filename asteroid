
// Some constants
var BG_COLOR = color(0, 0, 48);
var SHUTTLE_ROTATION_SPEED = 2;
var SHUTTLE_MAX_SPEED = 4;
var METEORITES_ROTATION_SPEED = 1;
var STARS_SPEED = 0.05;

// For keyboard keys
var keys = [];

// The planet in the middle
var Base = function(x, y, radius){
  this.x = x;
  this.y = y;
  this.radius = radius;
};

Base.prototype.draw = function() {
    noFill();
    stroke(245, 203, 35);
    strokeWeight(3);
    arc(this.x, this.y, 3 * this.radius, 0.7 * this.radius, 180,360);
    noStroke();
    fill(42, 126, 199);
    ellipse(this.x, this.y, 2 * this.radius, 2 * this.radius);
    noFill();
    stroke(245, 203, 35);
    arc(this.x, this.y, 3 * this.radius, 0.7 * this.radius, 0,180);
};

var base = new Base(width/2, height/2, 37);

// The space ship!
var Shuttle = function(x, y, w, h, angle){
    this.position = new PVector(x, y);
    this.w = w;
    this.h = h;
    this.angle = angle;
    this.velocity = new PVector(0, 0);
    this.acc = new PVector(0, 0);
    this.isEngineOn = false;
};

var shuttle = new Shuttle(width/2, height/2, 35, 65, 20);

var Meteorite = function(x, y, scale, angle){
    this.position = new PVector(x, y);
    this.scale = scale;
    this.angle = angle;
    this.rotation = random(-1, 1) * METEORITES_ROTATION_SPEED;
    // determines the shape
    this.randoms = [random(-30,30), random(-30,30), random(-40,40),  random(-30,30),  random(-30,30),  random(-30,30),  random(-30,30),  random(-30,30),  random(-30,30),  random(-30,30)];
};

// used in generating meteorites, so not to generate
// on top of the planet for visual reasons.

Meteorite.prototype.draw = function() {
    //conditional height
    var h = 100;
    //used for bezier curves
    var r1 = this.randoms[0];
    var r2 = this.randoms[1];
    var r3 = this.randoms[2];
    var r4 = this.randoms[3];
    var r5 = this.randoms[4];
    var r6 = this.randoms[5];
    var r7 = this.randoms[6];
    var r8 = this.randoms[7];
    var r9 = this.randoms[8];
    var r10 = this.randoms[9];
    fill(135, 106, 57);
    stroke(153, 148, 153);
    strokeWeight(10);
    pushMatrix();
    translate(this.position.x, this.position.y);
    scale(this.scale);
    rotate(this.angle);
    beginShape();
    //uppermost vertex
    vertex(0,-h/2 + r1);
    //Right part
    bezierVertex(61 + r2,-52 + r3, 58 + r4, 48 + r5, -4 + r6, 50);
    //Left part
    bezierVertex(-57 + r7, 47 + r8, -65 + r9, -48 + r10, 0, -h/2 + r1);
    endShape();
    
    popMatrix();
};

Meteorite.prototype.update = function(){
    this.angle += this.rotation;
};



Shuttle.prototype.draw = function() {
    pushMatrix();
    translate(this.position.x, this.position.y);
    rotate(90 + this.angle);
    //jet fuel fire
    if(this.isEngineOn){
        for(var i = 0; i < this.h/random(4.5, 6); i++){
            fill(255, 255-i*12, 0);
            noStroke();
           
             rect(-0.10 * this.w, 0.35 * (this.h)+i, 0.15*(this.w),  1);
             rect(0.10 * this.w, 0.35 * (this.h)+i, 0.15*(this.w),  1);
        }
    }
    // the shuttle
    stroke(46, 34, 133);
    strokeWeight(1);
    fill(255, 92, 203);
    beginShape();
    vertex(0, -0.5 * this.h);
    vertex(0.2 * this.w, 0);
    vertex(0.5 * this.w, 0.20 * this.h);
    vertex(0, 0.3 * this.h);
    vertex(-0.5 * this.w, 0.20 * this.h);
    vertex(-0.2 * this.w, 0);
    endShape(CLOSE);
    rectMode(CENTER);
    fill(21, 171, 111);
    ellipse(0, 0, 8,8);
    popMatrix();
};

Shuttle.prototype.rotate = function(targetAngle){
    
    if(targetAngle > 0){
        this.angle += SHUTTLE_ROTATION_SPEED;
    }
    else{
        this.angle -= SHUTTLE_ROTATION_SPEED;
    }
    this.angle = (this.angle + 360) % 360;
};

Shuttle.prototype.update = function(){
    
    //Constrain max speed
    if (this.velocity.mag() > SHUTTLE_MAX_SPEED){
       this.velocity.normalize();
       this.velocity.mult(SHUTTLE_MAX_SPEED);
    }
    // BUTTONS
    
    // "A" and "LEFT"
    if(keys[65] || keys[37]){
        this.rotate(-90);
    }
    // "D" and "RIGHT"
    else if(keys[68] || keys[39]){
        this.rotate(90);
    }
    // "W" and "UP"
    if(keys[87] || keys[38]){
        this.isEngineOn = true;
        var force;
        var forceX = cos(this.angle);
        var forceY = sin(this.angle);
        force = new PVector(forceX, forceY);
        force.normalize();
        force.mult(0.05);
        this.applyForce(force);
    }
    else{
        this.isEngineOn = false;
    }
    
    this.velocity.add(this.acc);
    this.position.add(this.velocity);
    
    // MOVING OFF THE SCREEN
    var offset = 30;
   
    if(this.position.x > width + offset){
        this.position.x = -offset;
    }
    else if(this.position.x < -offset){
        this.position.x = width + offset;
    }
     if(this.position.y > height + offset){
        this.position.y = -offset;
    }
    else if(this.position.y < -offset){
        this.position.y = height + offset;
    }
    this.acc.mult(0);
    this.draw();
    
};

Shuttle.prototype.applyForce = function(force){
    this.acc.add(force);
};

var Star = function(x, y, opacity, scale){
    this.x = x;
    this.y = y;
    this.opacity = opacity || 255;
    this.scale = scale || 1;
};
var stars = [];
Star.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, this.opacity);
    pushMatrix();
    translate(this.x, this.y);
    scale(this.scale);
    //I've found it easier to manually create a shape from a path
    // and then scale it than to calculate all of the points
    // programmatically
    beginShape();
    vertex(0, 20);
    vertex(-23.511, 32.361);
    vertex(-19.021, 6.180);
    vertex(-38.042, -12.361);
    vertex(-11.756, -16.180);
    vertex(0.000, -40.000);
    vertex(11.756, -16.180);
    vertex(38.042, -12.361);
    vertex(19.021, 6.180);
    vertex(23.511, 32.361);
    endShape(CLOSE);
    popMatrix();
};
Star.prototype.update = function(){
    this.x+= STARS_SPEED;
    if(this.x > width + 5){
        this.x = -10;
        this.y = random(-10, 410);
        this.opacity = random(100,255);
        this.scale = random(0.1, 0.35)*random(0.1, 0.35);
    }
};

var generateStars = function(num){
    for(var i = 0; i < num; i++){
        var randomScale = random(0.1, 0.35) * random(0.1, 0.35);
        stars.push(new Star(random(-10, 390), random(-10, 400), random(100,255), randomScale));
    }
};
var updateStars = function(){
    for(var i = 0; i < stars.length; i++){
       stars[i].update();
       stars[i].draw();
    }
};


generateStars(50);

var draw = function() {
   background(BG_COLOR);
   updateStars();

   base.draw();
   shuttle.update();
};

keyPressed = function(){
     keys[keyCode] = true;
};
keyReleased = function(){
    keys[keyCode] = false;
};
